"""
This file is part of the VulnerabilityManager project, a tool aimed at managing vulnerabilities
Copyright (C) 2025  Philippe Godbout
"""

import json
from types import SimpleNamespace

MANDATORY_ENVELOPE_FIELD = ['resultsPerPage',
                            'startIndex',
                            'totalResults',
                            'format',
                            'version',
                            'timestamp',
                            'vulnerabilities']

class VulnerabilityAPIResponse:
    """
    This class represents a single instance of an API response. If a full response requires multiple
    pages, then multiple instances of this class need to be created
    The reason for this class to exist is to avoid users having to deal directly with raw CVE data.
    This class conforms to the CVE API Schema: https://csrc.nist.gov/schema/nvd/api/2.0/cve_api_json_2.0.schema
    """

    infos = None

    def __init__(self, individual_api_response):
        """
        The constructor for VulnerabilityAPIResponse. Following this being called, the CVE is fully populated
        and no additional information is required.
        :param individual_api_response: The complete information directly from the JSON response
                                        for a complete response.
                                        The parameter can either be a string or a json object.
                                        https://docs.python.org/3/library/json.html
        """
        # We want to be able to call the same constructor with either a string or json
        # The code bellow is what allows for this.
        response_json = individual_api_response
        if isinstance(individual_api_response, str):
            response_json = json.loads(individual_api_response)

        # The data structure from NVD has "tree" levels with an outer and two inner envelopes.
        # The response parsing only requires the outer envelope and not the inner ones.
        # However, the outer envelope contains multiple mandatory fields that should be validated.
        if not self.is_outer_envelope_valid(response_json):
            raise ValueError('ERROR - Envelope missing required field')

        response_string = json.dumps(response_json)
        self.infos = json.loads(response_string, object_hook=lambda d: SimpleNamespace(**d))

    def is_outer_envelope_valid(self, envelope):
        """
        This simply validates that the outer envelope contains all the required fields
        :param envelope: A JSON parsed API response.
        :return: Boolean True if valid false otherwise.
        """
        return_value = True
        keys = envelope.keys()

        for mandatory_field in MANDATORY_ENVELOPE_FIELD:
            if mandatory_field not in keys:
                return_value = False
                break
        return return_value
